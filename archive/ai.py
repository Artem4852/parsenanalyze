from google import genai
from google.genai.types import GenerateContentConfig
import os
import dotenv
import json
import random
import PIL.Image

dotenv.load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")

system_instructions = """
You are an AI assistant that helps to extract price information from text blocks. What we are interested in is to get all commodities each company is buying as well as the price they are willing to pay. You will get text block as an input. You MUST output the result in JSON format as shown in the example below. Don't mention Kernel unless it is in the name of specific company/institution. For example, if company is "–ë–∞–Ω–¥—É—Ä—Å—å–∫–∏–π –û–ï–ó", don't write anything like "Kernel | –ë–∞–Ω–¥—É—Ä—Å—å–∫–∏–π –û–ï–ó" or "Kernel –ë–∞–Ω–¥—É—Ä—Å—å–∫–∏–π –û–ï–ó"

```json
"2017-09-04": {
    "date": "2017-09-04",
    "organizations": {
      "–¢—Ä–∞–Ω—Å-–°–µ—Ä–≤—ñ—Å –¢–û–í": [
        {
          "name": "–°–æ—è",
          "price": 10400,
          "priceUsd": 0
        },
        {
          "name": "–ü—à–µ–Ω–∏—Ü—è 2 –∫–ª–∞—Å",
          "price": 5000,
          "priceUsd": 165
        },
        {
          "name": "–ü—à–µ–Ω–∏—Ü—è 3 –∫–ª–∞—Å",
          "price": 4650,
          "priceUsd": 155
        }
      ],
      "–í–µ—Å–µ–ª–æ-–ö—É—Ç—Å—å–∫–∏–π –ö–•–ü –í–ê–¢ (–ø–æ—Ä—Ç)": [
        {
          "name": "–Ø—á–º—ñ–Ω—å 3 –∫–ª–∞—Å",
          "price": 4500,
          "priceUsd": 145
        },
        {
          "name": "–ü—à–µ–Ω–∏—Ü—è 2 –∫–ª–∞—Å",
          "price": 4950,
          "priceUsd": 163
        },
        {
          "name": "–ü—à–µ–Ω–∏—Ü—è 3 –∫–ª–∞—Å",
          "price": 4600,
          "priceUsd": 153
        },
        {
          "name": "–ü—à–µ–Ω–∏—Ü—è 5 –∫–ª–∞—Å",
          "price": 4400,
          "priceUsd": 146
        },
        {
          "name": "–ü—à–µ–Ω–∏—Ü—è 6 –∫–ª–∞—Å",
          "price": 4350,
          "priceUsd": 144
        }
      ],
      "–¢—ñ—Å-–ó–µ—Ä–Ω–æ –¢–û–í": [
        {
          "name": "–Ø—á–º—ñ–Ω—å 3 –∫–ª–∞—Å",
          "price": 4850,
          "priceUsd": 158
        },
        {
          "name": "–ü—à–µ–Ω–∏—Ü—è 2 –∫–ª–∞—Å",
          "price": 5000,
          "priceUsd": 165
        },
        {
          "name": "–ü—à–µ–Ω–∏—Ü—è 3 –∫–ª–∞—Å",
          "price": 4650,
          "priceUsd": 155
        },
        {
          "name": "–ü—à–µ–Ω–∏—Ü—è 6 –∫–ª–∞—Å",
          "price": 4440,
          "priceUsd": 148
        },
        {
          "name": "–†—ñ–ø–∞–∫ 1 –∫–ª–∞—Å",
          "price": 12800,
          "priceUsd": 420
        }
      ],
      "–ú–°–ü –ù—ñ–∫–∞-–¢–µ—Ä–∞ –¢–û–í": [
        {
          "name": "–ü—à–µ–Ω–∏—Ü—è 3 –∫–ª–∞—Å",
          "price": 4675,
          "priceUsd": 156
        }
      ]
    }
  },
```
"""

def get_prices(text_block: str) -> dict:
    client = genai.Client(api_key=api_key)

    response = client.models.generate_content(
        model="gemini-2.0-flash",
        contents=[text_block],
        config=GenerateContentConfig(
            system_instruction=system_instructions,
            # max_output_tokens=100,
            temperature=0.1,
            top_p=0.8,
            top_k=40
        )
    )

    data = response.text
    if "```json" in data:
        data = data.split("```json")[1].split("```")[0]
    parsed = json.loads(data)

    print(response)
    return parsed


if __name__ == "__main__":
  text_block = """
üî∞ KERNEL | –¶—ñ–Ω–æ–≤–∞ –ø–æ–ª—ñ—Ç–∏–∫–∞
–°—Ç–∞–Ω–æ–º –Ω–∞ 02.10.2025

üõ≥Ô∏è –¢–ë–¢ (–ß–æ—Ä–Ω–æ–º–æ—Ä—Å—å–∫):
‚Ä¢ –ü—à–µ–Ω–∏—Ü—è 2/3/4 –∫–ª ‚Äî 10 200 / 10 200 / 9 600 –≥—Ä–Ω/—Ç 
‚Ä¢ –Ø—á–º—ñ–Ω—å ‚Äî 10 000 –≥—Ä–Ω/—Ç
‚Ä¢ –ö—É–∫—É—Ä—É–¥–∑–∞ - 9400 –≥—Ä–Ω/—Ç

üåª –°–æ–Ω—è—à–Ω–∏–∫ (—É –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–∫—É –Ω–∞ 48 –æ–ª—ñ–π–Ω—ñ—Å—Ç—å)

üè≠ –ë–∞–Ω–¥—É—Ä—Å—å–∫–∏–π –û–ï–ó ‚Äî  
26 700 –≥—Ä–Ω/—Ç
üè≠ –£–ß–Ü ‚Äî 27 000 –≥—Ä–Ω/—Ç
üè≠ –°—Ç–∞—Ä–æ–∫–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤—Å—å–∫–∏–π –û–ï–ó ‚Äî 26 000 –≥—Ä–Ω/—Ç
üè≠ –ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π –û–ï–ó ‚Äî 
26 600 –≥—Ä–Ω/—Ç
üí∞–ü—Ä–µ–º—ñ—è / –î–∏—Å–∫–æ–Ω—Ç: +350 / -400 –≥—Ä–Ω/—Ç

üåª–°–æ–Ω—è—à–Ω–∏–∫ –≤–∏—Å–æ–∫–æ–æ–ª–µ—ó–Ω–æ–≤–∏–π (—É –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–∫—É –Ω–∞ 48 –æ–ª—ñ–π–Ω—ñ—Å—Ç—å)

üè≠–ü—Ä–∏–¥–Ω—ñ–ø—Ä–æ–≤—Å—å–∫–∏–π –û–ï–ó - 
31 200 –≥—Ä–Ω/—Ç
üí∞–ü—Ä–µ–º—ñ—è / –î–∏—Å–∫–æ–Ω—Ç: +350 / -400 –≥—Ä–Ω/—Ç

üå±–°–æ—è 
(–ë—ñ–ª–æ–∫ –Ω–µ –º–µ–Ω—à–µ 37%, –æ–ª—ñ–π–Ω—ñ—Å—Ç—å –Ω–µ –º–µ–Ω—à–µ 21%)

 üè≠–°—Ç–∞—Ä–æ–∫–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤—Å—å–∫–∏–π –û–ï–ó ‚Äî  16 500 –≥—Ä–Ω/—Ç

üí¨ –í—Å—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ä–æ–∑–≥–ª—è–¥–∞—î–º–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ 

–ú–µ–Ω–µ–¥–∂–µ—Ä —ñ–∑ –∑–∞–∫—É–ø—ñ–≤–µ–ª—å
üë®üèº‚Äçüíª –°–∏–Ω—å–∫—ñ–≤—Å—å–∫–∏–π –ê–Ω–¥—Ä—ñ–π
–¢–µ–ª–µ—Ñ–æ–Ω–∏ –¥–ª—è –∑–≤‚Äô—è–∑–∫—É:
üìû +38 (050) 401 56 57
üìû +38 (098) 580 78 79
"""
  prices = get_prices(text_block)
  print(json.dumps(prices, indent=2, ensure_ascii=False))